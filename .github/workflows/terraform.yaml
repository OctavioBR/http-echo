name: "Terraform Pipeline"
on:
  push:
    branches: [main]
    paths: [terraform/**]
  pull_request:
    branches: [main]
    paths: [terraform/**]
env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Clone
      uses: actions/checkout@v3

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.5

    - name: Terraform init
      id: init
      run: terraform init

    - name: Terraform format
      id: fmt
      run: terraform fmt -check -diff

    - name: Terraform validate
      id: validate
      run: terraform validate

    - name: tfsec
      uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
      with:
        github_token: ${{ github.token }}

    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Paste tf plan output on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `Terraform Format and Style üñå  \`${{ steps.fmt.outcome }}\`
          Terraform Initialization ‚öôÔ∏è  \`${{ steps.init.outcome }}\`
          Terraform Validation ü§ñ  \`${{ steps.validate.outcome }}\`
          Terraform Plan üìñ  \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>
          Pushed by: @${{ github.actor }}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform plan status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
